trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - '**/*.cs'
    - '**/*.csproj'
    - '**/*.bicep'
    - '**/*.yml'

pr:
  branches:
    include:
    - main
    - develop

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  environment: 'dev'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        version: $(dotNetVersion)
        includePreviewVersions: false

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --results-directory $(Agent.TempDirectory)/TestResults'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/TestResults/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/TestResults'

    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/app --no-build'
        publishWebProjects: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployInfrastructure
    displayName: 'Deploy to Azure'
    environment: $(environment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Bicep template'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: 'Azure-Service-Connection'
              subscriptionId: '$(AZURE_SUBSCRIPTION_ID)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(RESOURCE_GROUP_NAME)'
              location: '$(AZURE_LOCATION)'
              templateLocation: 'Linked artifact'
              csmFile: 'Infrastructure/main.bicep'
              csmParametersFile: 'Infrastructure/parameters.$(environment).json'
              overrideParameters: '-resourceGroupName $(RESOURCE_GROUP_NAME) -location $(AZURE_LOCATION) -environment $(environment)'
              deploymentMode: 'Incremental'

- stage: DeployApplication
  displayName: 'Deploy Application'
  dependsOn: DeployInfrastructure
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web Application'
    environment: $(environment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure-Service-Connection'
              appName: '$(WEB_APP_NAME)'
              package: '$(Pipeline.Workspace)/drop/app/**/*.zip'
              appType: 'webApp'

  - deployment: DeployFunctionApp
    displayName: 'Deploy Azure Functions'
    environment: $(environment)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: 'Azure-Service-Connection'
              appName: '$(FUNCTION_APP_NAME)'
              package: '$(Pipeline.Workspace)/drop/app/**/*.zip'
              appType: 'functionApp'

- stage: PostDeployment
  displayName: 'Post Deployment'
  dependsOn: DeployApplication
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: RunSmokeTests
    displayName: 'Run Smoke Tests'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        version: $(dotNetVersion)

    - task: DotNetCoreCLI@2
      displayName: 'Run smoke tests'
      inputs:
        command: 'test'
        projects: '**/*SmokeTests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'
        publishTestResults: true

  - job: UpdateApplicationInsights
    displayName: 'Update Application Insights'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Update Application Insights'
      inputs:
        azureSubscription: 'Azure-Service-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Update Application Insights with deployment information
          az monitor app-insights component update \
            --app $(APP_INSIGHTS_NAME) \
            --resource-group $(RESOURCE_GROUP_NAME) \
            --set tags.deployment=$(Build.BuildNumber) \
            --set tags.environment=$(environment) \
            --set tags.commit=$(Build.SourceVersion) 